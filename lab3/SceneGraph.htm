<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Graf sceny 2D</title>
    <script>
      var canvas; // Obiekt <canvas>
      var graphics; // Kontekst 2D
      var pixelSize;
      var frameNumber = 0;

      // Zakres współrzędnych (obszar widoczny)
      var X_LEFT = -5;
      var X_RIGHT = 5;
      var Y_BOTTOM = -3.5;
      var Y_TOP = 3.5;

      var BACKGROUND = "white";
      var running = false;

      // Offset dla pivotów (trójkątów) – przesunięcie w dół
      var pivotOffset = -0.5;

      // Scena (korzeń drzewa sceny)
      var world;

      // Obiekty w scenie
      var seesaw1, seesaw2, seesaw3;
      // Transformacje używane przy animacji
      var seesaw1Transform, seesaw2Transform, seesaw3Transform;
      var oct1LeftTransform, oct1RightTransform;
      var oct2LeftTransform, oct2RightTransform;
      var oct3LeftTransform, oct3RightTransform;

      // Podstawowe węzły rysujące proste kształty (SceneGraphNode)
      function SceneGraphNode() {
        this.fillColor = null;
        this.strokeColor = null;
      }
      SceneGraphNode.prototype.doDraw = function (g) {
        throw "doDraw not implemented";
      };
      SceneGraphNode.prototype.draw = function (g) {
        g.save();
        if (this.fillColor) {
          g.fillStyle = this.fillColor;
        }
        if (this.strokeColor) {
          g.strokeStyle = this.strokeColor;
        }
        this.doDraw(g);
        g.restore();
      };
      SceneGraphNode.prototype.setFillColor = function (color) {
        this.fillColor = color;
        return this;
      };
      SceneGraphNode.prototype.setStrokeColor = function (color) {
        this.strokeColor = color;
        return this;
      };
      SceneGraphNode.prototype.setColor = function (color) {
        this.fillColor = color;
        this.strokeColor = color;
        return this;
      };

      function CompoundObject() {
        SceneGraphNode.call(this);
        this.subobjects = [];
      }
      CompoundObject.prototype = new SceneGraphNode();
      CompoundObject.prototype.add = function (obj) {
        this.subobjects.push(obj);
        return this;
      };
      CompoundObject.prototype.doDraw = function (g) {
        for (var i = 0; i < this.subobjects.length; i++) {
          this.subobjects[i].draw(g);
        }
      };

      function TransformedObject(obj) {
        SceneGraphNode.call(this);
        this.object = obj;
        this.rotationInDegrees = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.translateX = 0;
        this.translateY = 0;
      }
      TransformedObject.prototype = new SceneGraphNode();
      TransformedObject.prototype.setRotation = function (angleDeg) {
        this.rotationInDegrees = angleDeg;
        return this;
      };
      TransformedObject.prototype.setScale = function (sx, sy) {
        this.scaleX = sx;
        this.scaleY = sy;
        return this;
      };
      TransformedObject.prototype.setTranslation = function (dx, dy) {
        this.translateX = dx;
        this.translateY = dy;
        return this;
      };
      TransformedObject.prototype.doDraw = function (g) {
        g.save();
        g.translate(this.translateX, this.translateY);
        g.rotate((this.rotationInDegrees * Math.PI) / 180);
        g.scale(this.scaleX, this.scaleY);
        if (this.fillColor) {
          g.fillStyle = this.fillColor;
        }
        if (this.strokeColor) {
          g.strokeStyle = this.strokeColor;
        }
        this.object.draw(g);
        g.restore();
      };

      // Definicje podstawowych kształtów
      var filledRect = new SceneGraphNode();
      filledRect.doDraw = function (g) {
        // Kwadrat o wymiarach 1×1, środek w (0,0)
        g.fillRect(-0.5, -0.5, 1, 1);
      };

      var filledTriangle = new SceneGraphNode();
      filledTriangle.doDraw = function (g) {
        g.beginPath();
        g.moveTo(-0.5, 0);
        g.lineTo(0.5, 0);
        g.lineTo(0, 1);
        g.closePath();
        g.fill();
      };

      var filledOctagon = new SceneGraphNode();
      filledOctagon.doDraw = function (g) {
        g.beginPath();
        const n = 8;
        const r = 0.5;
        for (let i = 0; i < n; i++) {
          let angle = (2 * Math.PI * i) / n;
          let x = r * Math.cos(angle);
          let y = r * Math.sin(angle);
          if (i === 0) g.moveTo(x, y);
          else g.lineTo(x, y);
        }
        g.closePath();
        g.fill();
        g.stroke();
        // „Szprychy”
        for (let i = 0; i < n; i++) {
          let angle = (2 * Math.PI * i) / n;
          let x = r * Math.cos(angle);
          let y = r * Math.sin(angle);
          g.beginPath();
          g.moveTo(0, 0);
          g.lineTo(x, y);
          g.stroke();
        }
      };

      // Tworzenie sceny (world) z trzema huśtawkami
      function createWorld() {
        world = new CompoundObject();

        // Parametry dla czerwonego prostokąta:
        // Środek prostokąta ma znajdować się na czubku trójkąta, czyli przy skali (1,2) czubek jest w (0,2).
        // Aby prostokąt łączył ośmiokąty, przyjmujemy:
        // d = redBarScaleX/2 = 1.03125, a po obrocie (θ ≈ 14,04°):
        // lewy koniec: (0,2) + (-1.03125*cosθ, -1.03125*sinθ) ≈ (-1, 1.75),
        // prawy koniec: (0,2) + (1.03125*cosθ, 1.03125*sinθ) ≈ (1, 2.25).
        var redBarScaleX = 2.0625,
          redBarScaleY = 0.2,
          redBarRotation = 14.04, // stopnie
          redBarTranslationX = 0,
          redBarTranslationY = 2; // środek prostokąta na czubku trójkąta

        // =============== HUŚTAWKA #1 (fioletowa) ===============
        seesaw1 = new CompoundObject();

        let pivot1 = new TransformedObject(filledTriangle)
          .setScale(1, 2)
          .setColor("purple");

        let bar1 = new TransformedObject(filledRect)
          .setScale(redBarScaleX, redBarScaleY)
          .setRotation(redBarRotation)
          .setTranslation(redBarTranslationX, redBarTranslationY)
          .setColor("red");

        // Pozycje ośmiokątów ustawione, aby pokrywały końce czerwonego prostokąta
        oct1LeftTransform = new TransformedObject(filledOctagon)
          .setTranslation(-1, 1.75)
          .setColor("black");
        oct1RightTransform = new TransformedObject(filledOctagon)
          .setTranslation(1, 2.25)
          .setColor("black");

        let barWithOct1 = new CompoundObject();
        barWithOct1.add(bar1);
        barWithOct1.add(oct1LeftTransform);
        barWithOct1.add(oct1RightTransform);

        seesaw1Transform = new TransformedObject(barWithOct1).setTranslation(
          0,
          0
        );

        // Pivot dla huśtawki #1 – dodajemy offset, aby przesunąć trójkąt w dół
        let seesaw1PivotTransform = new TransformedObject(
          new CompoundObject().add(pivot1).add(seesaw1Transform)
        ).setTranslation(-3, 0 + pivotOffset);

        seesaw1.add(seesaw1PivotTransform);
        world.add(seesaw1);

        // =============== HUŚTAWKA #2 (niebieska) ===============
        seesaw2 = new CompoundObject();

        let pivot2 = new TransformedObject(filledTriangle)
          .setScale(1, 2)
          .setColor("blue");

        let bar2 = new TransformedObject(filledRect)
          .setScale(redBarScaleX, redBarScaleY)
          .setRotation(redBarRotation)
          .setTranslation(redBarTranslationX, redBarTranslationY)
          .setColor("red");

        oct2LeftTransform = new TransformedObject(filledOctagon)
          .setTranslation(-1, 1.75)
          .setColor("black");
        oct2RightTransform = new TransformedObject(filledOctagon)
          .setTranslation(1, 2.25)
          .setColor("black");

        let barWithOct2 = new CompoundObject();
        barWithOct2.add(bar2);
        barWithOct2.add(oct2LeftTransform);
        barWithOct2.add(oct2RightTransform);

        seesaw2Transform = new TransformedObject(barWithOct2).setTranslation(
          0,
          0
        );

        // Pivot dla huśtawki #2 – przesunięty w dół z offsetem
        let seesaw2PivotTransform = new TransformedObject(
          new CompoundObject().add(pivot2).add(seesaw2Transform)
        ).setTranslation(0, -2 + pivotOffset);

        seesaw2.add(seesaw2PivotTransform);
        world.add(seesaw2);

        // =============== HUŚTAWKA #3 (zielona) ===============
        seesaw3 = new CompoundObject();

        let pivot3 = new TransformedObject(filledTriangle)
          .setScale(1, 2)
          .setColor("green");

        let bar3 = new TransformedObject(filledRect)
          .setScale(redBarScaleX, redBarScaleY)
          .setRotation(redBarRotation)
          .setTranslation(redBarTranslationX, redBarTranslationY)
          .setColor("red");

        oct3LeftTransform = new TransformedObject(filledOctagon)
          .setTranslation(-1, 1.75)
          .setColor("black");
        oct3RightTransform = new TransformedObject(filledOctagon)
          .setTranslation(1, 2.25)
          .setColor("black");

        let barWithOct3 = new CompoundObject();
        barWithOct3.add(bar3);
        barWithOct3.add(oct3LeftTransform);
        barWithOct3.add(oct3RightTransform);

        seesaw3Transform = new TransformedObject(barWithOct3).setTranslation(
          0,
          0
        );

        // Pivot dla huśtawki #3 – przesunięty w dół z offsetem
        let seesaw3PivotTransform = new TransformedObject(
          new CompoundObject().add(pivot3).add(seesaw3Transform)
        ).setTranslation(3, 1 + pivotOffset);

        seesaw3.add(seesaw3PivotTransform);
        world.add(seesaw3);
      }

      // Aktualizacja animacji – obracamy wyłącznie ośmiokąty
      function updateFrame() {
        frameNumber++;
        oct1LeftTransform.setRotation(frameNumber * 2);
        oct1RightTransform.setRotation(frameNumber * 2);
        oct2LeftTransform.setRotation(frameNumber * 3);
        oct2RightTransform.setRotation(frameNumber * 3);
        oct3LeftTransform.setRotation(frameNumber * 4);
        oct3RightTransform.setRotation(frameNumber * 4);
      }

      // Rysowanie sceny
      function draw() {
        graphics.save();
        graphics.fillStyle = BACKGROUND;
        graphics.fillRect(0, 0, canvas.width, canvas.height);
        applyLimits(graphics, X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM, false);
        graphics.lineWidth = pixelSize;
        world.draw(graphics);
        graphics.restore();
      }

      function applyLimits(g, xleft, xright, ytop, ybottom, preserveAspect) {
        var width = canvas.width;
        var height = canvas.height;
        if (preserveAspect) {
          var displayAspect = Math.abs(height / width);
          var requestedAspect = Math.abs((ybottom - ytop) / (xright - xleft));
          var excess;
          if (displayAspect > requestedAspect) {
            excess = (ybottom - ytop) * (displayAspect / requestedAspect - 1);
            ybottom += excess / 2;
            ytop -= excess / 2;
          } else if (displayAspect < requestedAspect) {
            excess = (xright - xleft) * (requestedAspect / displayAspect - 1);
            xright += excess / 2;
            xleft -= excess / 2;
          }
        }
        var pixelWidth = Math.abs((xright - xleft) / width);
        var pixelHeight = Math.abs((ybottom - ytop) / height);
        pixelSize = Math.min(pixelWidth, pixelHeight);
        g.scale(width / (xright - xleft), height / (ybottom - ytop));
        g.translate(-xleft, -ytop);
      }

      // Mechanizm animacji
      function frame() {
        if (running) {
          updateFrame();
          draw();
          requestAnimationFrame(frame);
        }
      }
      function doAnimationCheckbox() {
        var shouldRun = document.getElementById("animateCheck").checked;
        if (shouldRun !== running) {
          running = shouldRun;
          if (running) {
            requestAnimationFrame(frame);
          }
        }
      }
      function init() {
        canvas = document.getElementById("thecanvas");
        if (!canvas.getContext) {
          document.getElementById("message").innerHTML =
            "ERROR: Canvas not supported";
          return;
        }
        graphics = canvas.getContext("2d");
        document.getElementById("animateCheck").checked = false;
        document.getElementById("animateCheck").onchange = doAnimationCheckbox;
        createWorld();
        draw();
      }
    </script>
  </head>
  <body onload="init()" style="background-color: #eeeeee">
    <h3>Graf sceny 2D</h3>
    <noscript>
      <p>
        <b style="color: red"
          >Error: This page requires JavaScript, ale jest wyłączony.</b
        >
      </p>
    </noscript>
    <p id="message">
      <label>
        <input type="checkbox" id="animateCheck" />
        <b>Uruchom animację</b>
      </label>
    </p>
    <div style="float: left; border: 2px solid black">
      <canvas id="thecanvas" width="800" height="600"></canvas>
    </div>
  </body>
</html>
